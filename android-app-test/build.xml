<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2012 Dirk Vranckaert
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project name="WorkTime for Android Testing" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at utils/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
            />


    <!-- extension targets. Uncomment the ones where you want to do custom work
in between standard targets -->
    <!--
        <target name="-pre-build">
        </target>
        <target name="-pre-compile">
        </target>

        /* This is typically used for code obfuscation.
           Compiled code location: ${out.classes.absolute.dir}
           If this is not done in place, override ${out.dex.input.absolute.dir} */
        <target name="-post-compile">
        </target>
    -->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by utils such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

    <target name="-remove-emulator-dialogs" description="Execute five times a press on the DPAD center button of the emulator to make sure that any open apps/dialogs are gone!">
        <echo>Executing keyvent 23 = KEYCODE_DPAD_CENTER</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="input" />
            <arg value="keyevent" />
            <arg value="23" />
        </exec>
        <echo>Executing keyvent 23 = KEYCODE_DPAD_CENTER</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="input" />
            <arg value="keyevent" />
            <arg value="23" />
        </exec>
        <echo>Executing keyvent 23 = KEYCODE_DPAD_CENTER</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="input" />
            <arg value="keyevent" />
            <arg value="23" />
        </exec>
        <echo>Executing keyvent 23 = KEYCODE_DPAD_CENTER</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="input" />
            <arg value="keyevent" />
            <arg value="23" />
        </exec>
        <echo>Executing keyvent 23 = KEYCODE_DPAD_CENTER</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="input" />
            <arg value="keyevent" />
            <arg value="23" />
        </exec>
    </target>

    <target name="run-tests" depends="all, clean, emma, debug, install, -test-project-check, -remove-emulator-dialogs"
            description="Runs tests from the package defined in test.package property">
        <property name="tested.project.absolute.dir" location="${tested.project.dir}" />
        <property name="test.runner" value="com.zutubi.android.junitreport.JUnitReportTestRunner" />

        <!-- Application package of the tested project extracted from its manifest file -->
        <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
               expression="/manifest/@package" output="tested.manifest.package" />
        <xpath input="AndroidManifest.xml"
               expression="/manifest/@package" output="manifest.package" />

        <property name="emma.dump.file"
                  value="/data/data/${tested.manifest.package}/coverage.ec" />

        <property name="reports.dir" value="./junit-reports"/>
        <property name="report.files.dir" value="/data/data/${manifest.package}/files"/>
        <property name="report.files.backup.dir" value="/data/data/${tested.manifest.package}/files"/>

        <property name="screenshots.dir" value="./screenshots"/>
        <property name="screenshots.files.dir" value="/data/data/${tested.manifest.package}/screenshots"/>

        <echo>Cleaning up previous test reports...</echo>
        <delete dir="${reports.dir}"/>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="rm" />
            <arg value="${report.files.dir}/*" />
        </exec>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="rm" />
            <arg value="${report.files.backup.dir}/*" />
        </exec>
        <echo>Cleaning up previous screenshots...</echo>
        <delete dir="${screenshots.dir}"/>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="rm" />
            <arg value="${screenshots.files.dir}/*" />
        </exec>
        <echo>Cleaning up previous coverage files...</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}" />
            <arg value="shell" />
            <arg value="rm" />
            <arg value="${emma.dump.file}" />
        </exec>

        <echo>Running tests...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}"/>
            <!-- Only enable logcat output in console if something goes really wrong! -->
            <!--<arg value="logcat" />-->
            <arg value="shell" />
            <arg value="am" />
            <arg value="instrument" />
            <arg value="-w" />
            <arg value="-e" />
            <arg value="coverage" />
            <arg value="${emma.enabled}" />
            <arg value="-e" />
            <arg value="coverageFile"/>
            <arg value="${emma.dump.file}" />
            <arg value="-e" />
            <arg value="multiFile" />
            <arg value="true" />
            <arg value="${manifest.package}/${test.runner}" />
        </exec>

        <echo>Downloading XML test reports...</echo>
        <mkdir dir="${reports.dir}"/>
        <echo>Trying to download from test package...</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}"/>
            <arg value="pull" />
            <arg value="${report.files.dir}" />
            <arg value="${reports.dir}" />
        </exec>
        <echo>Trying to download from application package...</echo>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}"/>
            <arg value="pull" />
            <arg value="${report.files.backup.dir}" />
            <arg value="${reports.dir}" />
        </exec>

        <echo>Downloading screenshots...</echo>
        <mkdir dir="${screenshots.dir}"/>
        <exec executable="${adb}" failonerror="false">
            <arg line="${adb.device.arg}"/>
            <arg value="pull" />
            <arg value="${screenshots.files.dir}" />
            <arg value="${screenshots.dir}" />
        </exec>

        <if condition="${emma.enabled}">
            <then>
                <echo>WARNING: Code Coverage is currently only supported on the emulator and rooted devices.</echo>
                <echo>Downloading coverage file into project directory...</echo>
                <exec executable="${adb}" failonerror="true">
                    <arg line="${adb.device.arg}" />
                    <arg value="pull" />
                    <arg value="${emma.dump.file}" />
                    <arg value="coverage.ec" />
                </exec>
                <echo>Extracting coverage report...</echo>
                <emma>
                    <report sourcepath="${tested.project.absolute.dir}/${source.dir}"
                            verbosity="${verbosity}">
                        <infileset dir=".">
                            <include name="coverage.ec" />
                            <include name="coverage.em" />
                        </infileset>
                        <html outfile="coverage.html" />
                        <xml outfile="coverage/coverage.xml" />
                    </report>
                </emma>
                <echo>Cleaning up temporary files...</echo>
                <delete file="coverage.ec" />
                <delete file="coverage.em" />
                <echo>Saving the report file in ${basedir}/coverage/coverage.xml</echo>
            </then>
            <else>
                <run-tests-helper />
            </else>
        </if>
    </target>

</project>
